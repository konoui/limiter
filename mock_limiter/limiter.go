// Code generated by MockGen. DO NOT EDIT.
// Source: limiter.go

// Package mock_limiter is a generated GoMock package.
package mock_limiter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLimitPreparer is a mock of LimitPreparer interface.
type MockLimitPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockLimitPreparerMockRecorder
}

// MockLimitPreparerMockRecorder is the mock recorder for MockLimitPreparer.
type MockLimitPreparerMockRecorder struct {
	mock *MockLimitPreparer
}

// NewMockLimitPreparer creates a new mock instance.
func NewMockLimitPreparer(ctrl *gomock.Controller) *MockLimitPreparer {
	mock := &MockLimitPreparer{ctrl: ctrl}
	mock.recorder = &MockLimitPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitPreparer) EXPECT() *MockLimitPreparerMockRecorder {
	return m.recorder
}

// PrepareTokens mocks base method.
func (m *MockLimitPreparer) PrepareTokens(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareTokens", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareTokens indicates an expected call of PrepareTokens.
func (mr *MockLimitPreparerMockRecorder) PrepareTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareTokens", reflect.TypeOf((*MockLimitPreparer)(nil).PrepareTokens), arg0, arg1)
}

// ShouldThrottle mocks base method.
func (m *MockLimitPreparer) ShouldThrottle(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldThrottle", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldThrottle indicates an expected call of ShouldThrottle.
func (mr *MockLimitPreparerMockRecorder) ShouldThrottle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldThrottle", reflect.TypeOf((*MockLimitPreparer)(nil).ShouldThrottle), arg0, arg1)
}

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// ShouldThrottle mocks base method.
func (m *MockLimiter) ShouldThrottle(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldThrottle", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldThrottle indicates an expected call of ShouldThrottle.
func (mr *MockLimiterMockRecorder) ShouldThrottle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldThrottle", reflect.TypeOf((*MockLimiter)(nil).ShouldThrottle), arg0, arg1)
}

// MockPreparer is a mock of Preparer interface.
type MockPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockPreparerMockRecorder
}

// MockPreparerMockRecorder is the mock recorder for MockPreparer.
type MockPreparerMockRecorder struct {
	mock *MockPreparer
}

// NewMockPreparer creates a new mock instance.
func NewMockPreparer(ctrl *gomock.Controller) *MockPreparer {
	mock := &MockPreparer{ctrl: ctrl}
	mock.recorder = &MockPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreparer) EXPECT() *MockPreparerMockRecorder {
	return m.recorder
}

// PrepareTokens mocks base method.
func (m *MockPreparer) PrepareTokens(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareTokens", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareTokens indicates an expected call of PrepareTokens.
func (mr *MockPreparerMockRecorder) PrepareTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareTokens", reflect.TypeOf((*MockPreparer)(nil).PrepareTokens), arg0, arg1)
}
