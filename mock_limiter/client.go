// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_limiter is a generated GoMock package.
package mock_limiter

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
)

// MockDDBClient is a mock of DDBClient interface.
type MockDDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDDBClientMockRecorder
}

// MockDDBClientMockRecorder is the mock recorder for MockDDBClient.
type MockDDBClientMockRecorder struct {
	mock *MockDDBClient
}

// NewMockDDBClient creates a new mock instance.
func NewMockDDBClient(ctrl *gomock.Controller) *MockDDBClient {
	mock := &MockDDBClient{ctrl: ctrl}
	mock.recorder = &MockDDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDDBClient) EXPECT() *MockDDBClientMockRecorder {
	return m.recorder
}

// BatchWriteItem mocks base method.
func (m *MockDDBClient) BatchWriteItem(arg0 context.Context, arg1 *dynamodb.BatchWriteItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchWriteItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.BatchWriteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWriteItem indicates an expected call of BatchWriteItem.
func (mr *MockDDBClientMockRecorder) BatchWriteItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteItem", reflect.TypeOf((*MockDDBClient)(nil).BatchWriteItem), varargs...)
}

// GetItem mocks base method.
func (m *MockDDBClient) GetItem(arg0 context.Context, arg1 *dynamodb.GetItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDDBClientMockRecorder) GetItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDDBClient)(nil).GetItem), varargs...)
}

// UpdateItem mocks base method.
func (m *MockDDBClient) UpdateItem(arg0 context.Context, arg1 *dynamodb.UpdateItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDDBClientMockRecorder) UpdateItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDDBClient)(nil).UpdateItem), varargs...)
}
